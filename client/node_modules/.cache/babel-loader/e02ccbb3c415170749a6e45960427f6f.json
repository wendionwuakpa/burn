{"ast":null,"code":"var _jsxFileName = \"/Users/wendionwuakpa/Desktop/Career/codepath/web102_unit7lab/client/src/pages/ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client'; // const ReadPosts = (props) => {\n//     const [posts, setPosts] = useState([]);\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             // making the call to supabase is async so need to await \n//             const {data} = await supabase\n//             .from('Posts')\n//             .select()\n//             .order('created_at', {ascending: true})\n//             //set state of posts \n//             setPosts(data);\n//         }\n//         fetchPosts(); \n//     }, [props]);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = _ref => {\n  _s();\n\n  let {\n    sortType,\n    searchQuery\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let query = supabase.from('Posts').select();\n\n      if (searchQuery) {\n        query = query.ilike('title', `%${searchQuery}%`);\n      }\n\n      if (sortType === 'rating') {\n        query = query.order('rating', {\n          ascending: false\n        });\n      } else {\n        // Default to sort by created_at\n        query = query.order('created_at', {\n          ascending: false\n        });\n      }\n\n      const {\n        data,\n        error\n      } = await query;\n\n      if (!error && data) {\n        setPosts(data);\n      } else {\n        console.error(error);\n      }\n    };\n\n    fetchPosts();\n  }, [sortType, searchQuery]); // Depend on sortType and searchQuery\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: posts && posts.length > 0 ? posts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      author: post.author,\n      description: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: 'No Reviews Submitted Yet.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","sortType","searchQuery","posts","setPosts","fetchPosts","query","from","select","ilike","order","ascending","data","error","console","length","map","post","index","id","title","author","description"],"sources":["/Users/wendionwuakpa/Desktop/Career/codepath/web102_unit7lab/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport {supabase} from '../client'\n\n// const ReadPosts = (props) => {\n\n//     const [posts, setPosts] = useState([]);\n\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             // making the call to supabase is async so need to await \n//             const {data} = await supabase\n//             .from('Posts')\n//             .select()\n//             .order('created_at', {ascending: true})\n\n//             //set state of posts \n//             setPosts(data);\n//         }\n//         fetchPosts(); \n//     }, [props]);\n\nconst ReadPosts = ({ sortType, searchQuery }) => {\n    const [posts, setPosts] = useState([]);\n  \n    useEffect(() => {\n      const fetchPosts = async () => {\n        let query = supabase\n          .from('Posts')\n          .select();\n  \n        if (searchQuery) {\n          query = query.ilike('title', `%${searchQuery}%`);\n        }\n  \n        if (sortType === 'rating') {\n          query = query.order('rating', { ascending: false });\n        } else { // Default to sort by created_at\n          query = query.order('created_at', { ascending: false });\n        }\n  \n        const { data, error } = await query;\n  \n        if (!error && data) {\n          setPosts(data);\n        } else {\n          console.error(error);\n        }\n      };\n  \n      fetchPosts(); \n    }, [sortType, searchQuery]); // Depend on sortType and searchQuery\n  \n\n    \n    return (\n        <div className=\"ReadPosts\">\n            {\n                posts && posts.length > 0 ?\n                posts.map((post,index) => \n                   <Card id={post.id} title={post.title} author={post.author} description={post.description}/>\n                ) : <h2>{'No Reviews Submitted Yet.'}</h2>\n            }\n        </div>  \n    )\n};\n\nexport default ReadPosts;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAQC,QAAR,QAAuB,WAAvB,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,SAAS,GAAG,QAA+B;EAAA;;EAAA,IAA9B;IAAEC,QAAF;IAAYC;EAAZ,CAA8B;EAC7C,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,YAAY;MAC7B,IAAIC,KAAK,GAAGP,QAAQ,CACjBQ,IADS,CACJ,OADI,EAETC,MAFS,EAAZ;;MAIA,IAAIN,WAAJ,EAAiB;QACfI,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,OAAZ,EAAsB,IAAGP,WAAY,GAArC,CAAR;MACD;;MAED,IAAID,QAAQ,KAAK,QAAjB,EAA2B;QACzBK,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,QAAZ,EAAsB;UAAEC,SAAS,EAAE;QAAb,CAAtB,CAAR;MACD,CAFD,MAEO;QAAE;QACPL,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,YAAZ,EAA0B;UAAEC,SAAS,EAAE;QAAb,CAA1B,CAAR;MACD;;MAED,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkB,MAAMP,KAA9B;;MAEA,IAAI,CAACO,KAAD,IAAUD,IAAd,EAAoB;QAClBR,QAAQ,CAACQ,IAAD,CAAR;MACD,CAFD,MAEO;QACLE,OAAO,CAACD,KAAR,CAAcA,KAAd;MACD;IACF,CAtBD;;IAwBAR,UAAU;EACX,CA1BQ,EA0BN,CAACJ,QAAD,EAAWC,WAAX,CA1BM,CAAT,CAH6C,CA6BhB;;EAI7B,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,UAEQC,KAAK,IAAIA,KAAK,CAACY,MAAN,GAAe,CAAxB,GACAZ,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,kBACP,QAAC,IAAD;MAAM,EAAE,EAAED,IAAI,CAACE,EAAf;MAAmB,KAAK,EAAEF,IAAI,CAACG,KAA/B;MAAsC,MAAM,EAAEH,IAAI,CAACI,MAAnD;MAA2D,WAAW,EAAEJ,IAAI,CAACK;IAA7E;MAAA;MAAA;MAAA;IAAA,QADH,CADA,gBAGI;MAAA,UAAK;IAAL;MAAA;MAAA;MAAA;IAAA;EALZ;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH,CA3CD;;GAAMtB,S;;KAAAA,S;AA6CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}